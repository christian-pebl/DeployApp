rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a project is shared
    function isProjectShared(projectId) {
      return exists(/databases/$(database)/documents/shares_by_project/$(projectId));
    }

    // Projects can be read by anyone if shared, but only written by the owner.
    match /projects/{projectId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectShared(projectId));
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Pins, Lines, Areas, and Tags can be read by anyone if their project is shared, but only written by the owner.
    match /{collection}/{docId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isProjectShared(resource.data.projectId));
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // This is a catch-all for pins, lines, areas, tags.
      // We check for projectId on the resource, which should exist for these collections.
    }
    
    // Users can read map views and settings only for their own user ID.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Anyone can read a share document to get the original projectId.
    match /shares/{shareId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // This collection is just a lookup table. Only the backend (via a share creation) should write to this.
    // The security rule for creating a `shares` document implicitly protects this.
    match /shares_by_project/{projectId} {
       allow read: if request.auth != null;
       allow write: if request.auth != null && get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
       allow delete: if false;
    }
  }
}