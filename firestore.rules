rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helpers
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProjectOwner(projectId) {
      return isOwner(get(/databases/$(database)/documents/projects/$(projectId)).data.userId);
    }
    
    function canImportProject(projectId) {
      return exists(/databases/$(database)/documents/shares_by_project/$(projectId));
    }
    
    // Project documents
    match /projects/{projectId} {
      allow read: if isOwner(resource.data.userId) || canImportProject(projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Share documents
    match /shares/{shareId} {
      allow read: if request.auth != null;
      allow create: if isProjectOwner(request.resource.data.projectId);
      allow update, delete: if false; 
    }
    
    match /shares_by_project/{projectId} {
       allow read: if false; // Should not be read directly
       allow create: if isProjectOwner(projectId);
       allow update, delete: if isProjectOwner(projectId);
    }
    
    // Data documents (Pins, Lines, Areas, Tags)
    match /{collection}/{docId} {
      allow read: if isOwner(resource.data.userId) || canImportProject(resource.data.projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
  }
}
