rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // A user can read a project if they own it OR if a valid share document exists for it.
    function isShared(projectId) {
      return exists(/databases/$(database)/documents/shares/$(*), {projectId: projectId});
    }

    match /projects/{projectId} {
      allow read: if isOwner(resource.data.userId) || isShared(projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
    match /pins/{pinId} {
      allow read: if isOwner(resource.data.userId) || isShared(resource.data.projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
    match /lines/{lineId} {
      allow read: if isOwner(resource.data.userId) || isShared(resource.data.projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
    match /areas/{areaId} {
      allow read: if isOwner(resource.data.userId) || isShared(resource.data.projectId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /shares/{shareId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.originalOwnerId;
      allow update, delete: if false;
    }
  }
}
